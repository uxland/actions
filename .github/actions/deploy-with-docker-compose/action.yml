---
name: 'Deploy with Docker Compose'
description: 'Deploy with Docker Compose'
inputs:
  image_name:
    description: 'Full image name to deploy'
    required: true
    type: string
  version:
    description: 'Image tag to deploy'
    required: true
    type: string
  create_network_name:
    description: 'Create a network with the given name (to network different Compose projects)'
    required: false
    type: string
  cr_pat:
    description: 'GitHub Container Registry PAT'
    required: true
    type: string
  environment:
    description: 'Environment to deploy in (GitHub Actions self-hosted runner tag)'
    required: true
    type: string
  environment_secrets_context:
    # See: https://stackoverflow.com/questions/68008181/how-do-i-get-all-github-secrets-into-env-variables-for-actions-to-access-powers
    description: 'Environment secrets context JSON (e.g. toJson(secrets))'
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}  # FIXME: We do this to get the newest commit after "Update version", but this is racy

    - name: Login to GitHub packages
      env:
        CR_PAT: ${{ inputs.cr_pat }}
      shell: bash
      run: |
        echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin

    - name: Deploy environment file
      shell: bash
      env:
        ENVIRONMENT_SECRETS_CONTEXT: ${{ inputs.environment_secrets_context }}
      run: |
          mkdir -p "$HOME/${{ github.event.repository.name }}"

          # Convert from JSON {"KEY1": "VALUE1", "KEY2": "VALUE2", ...} to a KEY1=VALUE1 KEY2=VALUE2 ... array
          readarray -d '' ENVVARS < <(echo "$ENVIRONMENT_SECRETS_CONTEXT" | \
            docker run --rm -i --network none --entrypoint jq docker.io/linuxserver/yq:3.1.1 -j 'to_entries[] | "\(.key)=\(.value)\u0000"')
          # Replace environment variables in env file using envsubst
          env -i "${ENVVARS[@]}" envsubst <"deployment/env.${{ inputs.environment }}" >"$HOME/${{ github.event.repository.name }}/env"

    - name: Pull images
      env:
        VERSION: ${{inputs.version}}
      shell: bash
      run: |
        rm -rf "$HOME/${{ github.event.repository.name }}"/deployment/configs
        if [ -d deployment/configs ]; then
          mkdir -p "$HOME/${{ github.event.repository.name }}"/deployment/configs
          cp -r deployment/configs/* "$HOME/${{ github.event.repository.name }}"/deployment/configs
        fi

        cp deployment/docker-compose.yml "$HOME/${{ github.event.repository.name }}"/docker-compose.yml

        # Create definitive docker-compose.yml file (using yq) by (1) removing the "build:" key and (2) setting the image tag with the appropriate version
        docker run --rm -i --network none -e IMAGE_NAME="${{inputs.image_name}}" -e VERSION="$VERSION" docker.io/mikefarah/yq:4.31.2 \
          '.services[] |= (select(.image | test("^" + env(IMAGE_NAME))) | del(.build) | .image = env(IMAGE_NAME) + ":" + env(VERSION))' \
          <"$HOME/${{ github.event.repository.name }}"/docker-compose.yml \
          >"$HOME/${{ github.event.repository.name }}"/docker-compose.yml.tmp
        mv "$HOME/${{ github.event.repository.name }}"/docker-compose.yml.tmp "$HOME/${{ github.event.repository.name }}"/docker-compose.yml

        docker-compose \
          -f "$HOME/${{ github.event.repository.name }}/docker-compose.yml" \
          pull

    - name: Stop running containers
      shell: bash
      run: |
        docker-compose \
          -f "$HOME/${{ github.event.repository.name }}/docker-compose.yml" \
          down --remove-orphans

    - name: Create cross-project network
      if: ${{ inputs.create_network_name != '' }}
      shell: bash
      run: |
        docker network inspect "${{ inputs.create_network_name }}" >/dev/null 2>/dev/null || \
          docker network create --driver bridge "${{ inputs.create_network_name }}"

    - name: Deploy new containers
      shell: bash
      run: |
        docker-compose \
          -f "$HOME/${{ github.event.repository.name }}/docker-compose.yml" \
          --env-file "$HOME/${{ github.event.repository.name }}/env" \
          up --detach
