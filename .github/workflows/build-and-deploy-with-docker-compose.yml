---
name: Build and deploy with Docker Compose

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy in (GitHub Actions self-hosted runner tag)'
        required: true
        type: string
      image_name:
        description: 'Full image name to deploy'
        required: true
        type: string
      create_network_name:
        description: 'Create a network with the given name (to network different Compose projects)'
        required: false
        type: string
      prune_old_images:
        description: Prune old images
        type: boolean
        default: true
      build_artifacts_name:
        description: Name of the build artifact to create
        required: false
        type: string
      build_artifacts_path:
        description: Path of the build artifacts inside the 'builder' Docker target
        required: false
        type: string
    secrets:
      cr_pat:
        description: 'GitHub Container Registry PAT'
        required: true
      environment_secrets_context:
        # See: https://stackoverflow.com/questions/68008181/how-do-i-get-all-github-secrets-into-env-variables-for-actions-to-access-powers
        description: 'Environment secrets context JSON (e.g. toJson(secrets))'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}  # FIXME: We do this to get the newest commit after "Update version", but this is racy

      - id: get-version
        name: Get version from lerna.json
        run: |
          VERSION=$(node -p -e "require('./lerna.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: USERNAME
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: '${{inputs.image_name}}:${{ env.VERSION }}'
          push: true
          file: deployment/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build artifacts
        if: ${{ inputs.build_artifacts_name != '' && inputs.build_artifacts_path != '' }}
        run: |
          docker buildx build . --cache-from type=gha --file deployment/Dockerfile --target builder --tag artifacts-tmp-image --load
          docker create --name artifacts-tmp-container artifacts-tmp-image
          docker cp artifacts-tmp-container:"${{inputs.build_artifacts_path}}" build-artifacts
          docker rm --force --volumes artifacts-tmp-container
          docker rmi --force artifacts-tmp-image

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ inputs.build_artifacts_name != '' && inputs.build_artifacts_path != '' }}
        with:
          name: ${{inputs.build_artifacts_name}}
          path: build-artifacts

  deployment:
    needs: build
    environment: '${{inputs.environment}}'
    runs-on: [self-hosted, '${{inputs.environment}}']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}  # FIXME: We do this to get the newest commit after "Update version", but this is racy

      # FIXME: Don't use the action in the master branch, but rather in the same ref. Doesn't seem to be possible:
      # https://web.archive.org/web/20220711004255/https://github.community/t/ref-head-in-reusable-workflows/203690
      - uses: uxland/actions/.github/actions/deploy-with-docker-compose@master
        with:
          image_name: '${{inputs.image_name}}'
          version: '${{needs.build.outputs.version}}'
          create_network_name: '${{inputs.create_network_name}}'
          cr_pat: '${{secrets.cr_pat}}'
          environment: '${{inputs.environment}}'
          environment_secrets_context: '${{secrets.environment_secrets_context}}'

      - name: Delete old Docker images
        if: ${{ inputs.prune_old_images == true }}
        run: docker image prune -a --filter "until=1000h" --force
